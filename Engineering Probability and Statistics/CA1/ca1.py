# -*- coding: utf-8 -*-
"""CA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/172ugOGDN1ZOJbFgfWxBylcArj79O40rb

# Q1
"""

import numpy as np

m = 5000
n = 500
probabilities = np.arange(0.0, 1.01, 0.01)

samplesPerProb = np.zeros((len(probabilities), m))
expectationPerProb = np.zeros((2,len(probabilities)))
variancePerProb = np.zeros((2,len(probabilities)))

def bernoliSampleGenrator(prob):
  bernoliGenerated = np.random.choice([0, 1], size=(m * n), p=[1 - prob, prob])
  bernoliOrganized = np.reshape(np.array(bernoliGenerated), (m, n))
  BinominalSamples = np.sum(bernoliOrganized, axis=1)
  return BinominalSamples

for i, prob in enumerate(probabilities):
    samplesPerProb[i, :] = bernoliSampleGenrator(prob)
    expectationPerProb[0,i] = n*prob
    variancePerProb[0,i] = n*prob*(1-prob)

expectationPerProb[1,:] = np.sum(samplesPerProb, axis=1)/m
sampExDiffPerProb = samplesPerProb-(np.reshape(expectationPerProb[1,:], (len(probabilities), 1)))
sampExDiff2PerProb = (sampExDiffPerProb * sampExDiffPerProb)
variancePerProb[1,:] = np.sum(sampExDiff2PerProb, axis=1)/m

print(expectationPerProb[0])
print(expectationPerProb[1])
print("----------")
print(variancePerProb[0])
print(variancePerProb[1])

import matplotlib.pyplot as plt
fig, (p1, p2) = plt.subplots(1, 2, figsize=(10.8, 4))

p1.set_xlabel('Probability')
p1.set_ylabel('Expectation')
p1.plot(probabilities, expectationPerProb[0], color='tab:red', label='Theoretical')
p1.plot(probabilities, expectationPerProb[1], linestyle='dashed', color='tab:green', label='Sample')
p1.legend(loc='upper left')

p2.set_xlabel('Probability')
p2.set_ylabel('Variance')
p2.plot(probabilities, variancePerProb[0], color='blue', label='Theoretical')
p2.plot(probabilities, variancePerProb[1], linestyle='dashed', color='red', label='Sample')
p2.legend(loc='upper left')

plt.tight_layout()
plt.show()

"""# Q2"""

import numpy as np
from scipy.stats import norm
from scipy.stats import poisson
from scipy.stats import binom
import matplotlib.pyplot as plt

n = 250
p = 0.008

jointX = np.linspace(0, 10, 1000)
discreteX = np.arange(0, 10)

pdfNormal = norm.pdf(jointX, loc=n * p, scale=np.sqrt(n * p * (1 - p)))
pmfPoisson = poisson.pmf(discreteX, mu=n * p)
pmfBinomial = binom.pmf(discreteX, n=n, p=p)

plt.figure(figsize=(10, 6))

plt.plot(jointX, pdfNormal, color='black', label='Normal')
plt.bar(discreteX - 0.05, pmfPoisson, width=0.1, color='red', label='Poisson')
plt.bar(discreteX + 0.05, pmfBinomial, width=0.1, color='blue', label='Binomial')

plt.xlabel('X')
plt.ylabel('Probability')
plt.legend()

plt.show()

"""# Q3 - Part 1"""

from scipy.stats import norm
import numpy as np
from scipy.integrate import quad

def normalPdf(x):
  return norm.pdf(x, loc=80, scale=12)

def normalCdf(x):
  result, _ = quad(normalPdf, 0, x)
  return result

def cdfInverse(prob):
  lowerGuess = 0
  upperGuess = 120
  Guess = (lowerGuess + upperGuess) / 2
  while True:
    Guess = (lowerGuess + upperGuess) / 2
    result = normalCdf(Guess)

    if np.abs(result - prob) < 1e-5:
      break
    if result >= prob:
      upperGuess = Guess
    else:
      lowerGuess = Guess

  return Guess


print(f'\n 1. {cdfInverse(0.9)} \n')
print(f'\n 2. {cdfInverse(0.5)} to {cdfInverse(0.75)} \n')
print(f'\n 3. {normalCdf(90)-normalCdf(80)} \n')

"""# Q3 - Bonus"""

import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

sampleCount = 10000000

uniform = 20 * np.random.uniform(size=sampleCount)
expon = np.random.exponential(scale=1/0.08 , size=sampleCount)
poisson = np.random.poisson(lam= 12 , size=sampleCount)

total = expon + poisson +  uniform

x = np.linspace(min(total), max(total), 10000)
normalPdf = norm.pdf(x, loc=np.mean(total), scale=np.std(total))

plt.hist(total, bins=100, density=True, label='Histogram')
plt.plot(x, normalPdf, color='black', label='Normal')

plt.xlabel('sum of scores')
plt.ylabel('probability')
plt.legend()
plt.show()

"""# Q3 - Part 2"""

import numpy as np
from scipy.stats import norm
from scipy.stats import poisson
from scipy.stats import binom
import matplotlib.pyplot as plt

n = 7072
p = 0.45

jointX = np.linspace(2990, 3400, 1000)
discreteX = np.arange(2990, 3400)

pdfNormal = norm.pdf(jointX, loc=n * p, scale=np.sqrt(n * p * (1 - p)))
pmfPoisson = poisson.pmf(discreteX, mu=n * p)
pmfBinomial = binom.pmf(discreteX, n=n, p=p)

plt.figure(figsize=(10, 6))

plt.plot(jointX, pdfNormal, color='black', label='Normal')
plt.bar(discreteX - 0.05, pmfPoisson, width=0.1, color='red', label='Poisson')
plt.bar(discreteX + 0.05, pmfBinomial, width=0.1, color='blue', label='Binomial')

plt.xlabel('X')
plt.ylabel('Probability')
plt.legend()

plt.show()